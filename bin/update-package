#!/usr/bin/env node

'use strict';

const scripts = [
  { name: 'start',
    script: 'node app.js'
  },
  { name: 'pretest',
    script: 'npm run test:lint'
  },
  { name: 'test',
    deps: ['mocha'],
    script: 'npm run test:unit'
  },
  { name: 'test',
    script: 'true'
  },
  { name: 'posttest',
    deps: ['nyc'],
    script: 'npm audit --production'
  },
  { name: 'test:unit',
    deps: ['nyc', 'mocha'],
    script: 'nyc mocha ./test/unit --recursive --require ./test/unit/helper'
  },
  { name: 'posttest',
    deps: ['istanbul'],
    script: 'npm run test:coverage'
  },
  { name: 'test:lint',
    deps: ['eslint'],
    script: 'eslint . && hmpo-lintapostrophes'
  },
  { name: 'test:lint',
    script: 'hmpo-lintapostrophes'
  },
  { name: 'test:unit',
    deps: ['istanbul', 'mocha'],
    script: 'istanbul cover _mocha -- ./test/unit --recursive --require ./test/unit/helper'
  },
  { name: 'test:unit',
    deps: ['mocha'],
    script: 'mocha ./test/unit --recursive --require ./test/unit/helper'
  },
  { name: 'test:coverage',
    deps: ['istanbul'],
    script: "istanbul check-coverage"
  }
];

const fs = require('fs');

const filename = process.argv[2];
const pkg = JSON.parse(fs.readFileSync(filename, 'utf8'));

let changed, name;

const update = (dst, src) => {
  let obj = pkg;

  dst.split('.').forEach(part => obj = obj[part] = obj[part] || {});

  src.forEach(item => {
    // check if it exists
    if (!item.force && obj[item.name]) return;
    // check if different
    if (obj[item.name] === item.script) return;
    // check if matches regular expression
    if (item.allow && item.allow.test(obj[item.name])) return;
    // check deps
    if (item.deps) {
      let dep;
      for (dep of item.deps) {
        if (!pkg.dependencies[dep] && !pkg.devDependencies[dep]) return;
      }
    }
    // add item
    obj[item.name] = item.script;
    changed = true;
    console.log(dst + '.' + item.name + ' script set to ' + obj[item.name] + ' in ' + filename);
  });
};

update('scripts', scripts);

if (pkg.devDependencies && pkg.devDependencies.nyc && !pkg.nyc) {
  changed = true;
  pkg.nyc = {
    "all": true,
    "exclude": [
      "assets/**",
      "coverage/**",
      "public/**",
      "test/**"
    ],
    "check-coverage": true,
    "skip-full": true,
    "temp-directory": "coverage/.nyc_output",
    "reporter": [
      "text-summary",
      "text",
      "lcov"
    ],
    "statements": 100,
    "branches": 100,
    "functions": 100,
    "lines": 100
  }
}

if (!pkg.engines) {
  pkg.engines = {};
}
if (!pkg.engines.node) {
  changed = true;
  pkg.node = '>=16';
  pkg.npm = '>=8';
}

if (changed) {
  const pkgStr = JSON.stringify(pkg, null, 2) + '\n';
  fs.writeFileSync(filename, pkgStr, 'utf8');
  console.log(filename + ' updated');
}
